// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

 enum Role {
    PERSONAL
    TRAINER
    ADMIN
 }

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(PERSONAL)
    trainer       User?     @relation("TrainerClients", fields: [trainerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    trainerId     String?
    clients       User[]  @relation("TrainerClients")
    profile       Profile? 

    @@index([trainerId])
}

model Profile {
  id     String  @id @default(cuid())
  user   User @relation(fields: [userId], references: [id])
  userId String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  goals String?
  notes String?
  tags ProfileTag[]
  displayPlans Plan[] @relation("DisplayProfiles")
  createdPlans Plan[] @relation("PlanCreatedBy")
  createdWorkouts Workout[] @relation("WorkoutCreatedBy")
}

model ProfileTag {
    id String @id @default(cuid())
    profile Profile @relation(fields: [profileId], references: [id])
    profileId String
    name String

    @@index([profileId])
}

enum PlanInterval {
    WEEKS
    MONTHS
}
model Plan {
    id String @id @default(cuid()) 
    displayProfiles Profile[] @relation("DisplayProfiles")
    createdBy Profile @relation("PlanCreatedBy", fields: [profileId], references: [id])
    profileId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name String
    description String?
    startDate DateTime?
    planInterval PlanInterval @default(WEEKS)
    tags PlanTag[]
    allowDisplayProfileEdit Boolean @default(false)
    planSections PlanSection[]

    @@index([profileId])
}

model PlanTag {
    id String @id @default(cuid())
    plan Plan @relation(fields: [planId], references: [id])
    planId String
    name String

    @@index([planId])
}

model PlanSection {
    id String @id @default(cuid())  
    plan Plan @relation(fields: [planId], references: [id])
    planId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name String
    order Int
    workouts Workout[]

    @@index([planId])
}

model Workout {
    id String @id @default(cuid())
    planSection PlanSection @relation(fields: [planSectionId], references: [id])
    planSectionId String
    createdBy Profile @relation("WorkoutCreatedBy", fields: [profileId], references: [id])
    profileId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name String
    order Int
    tags WorkoutTag[]
    duration Int?
    durationInterval WorkoutDurationInterval @default(SECONDS)
    workoutType WorkoutType @relation(fields: [workoutTypeId], references: [id])
    workoutTypeId String
    workoutTargetArea WorkoutTargetArea? @relation(fields: [workoutTargetAreaId], references: [id])
    workoutTargetAreaId String
    workoutIntensity WorkoutIntensity? @relation(fields: [workoutIntensityId], references: [id])
    workoutIntensityId String
    allowDisplayProfileEdit Boolean @default(false)
    workoutSections WorkoutSection[]

    @@index([profileId])
    @@index([planSectionId])
    @@index([workoutTypeId])
    @@index([workoutTargetAreaId])
    @@index([workoutIntensityId])
}

model WorkoutTag {
    id String @id @default(cuid())
    workout Workout @relation(fields: [workoutId], references: [id])
    workoutId String
    name String

    @@index([workoutId])
}

enum WorkoutDurationInterval {
    SECONDS
    METRES
}

// Strength, Cardio, Swim
model WorkoutType {
    id String @id @default(cuid())
    name String @unique
    workouts Workout[]
    movements Movement[]
}

// Full, Upper, Lower, Core
model WorkoutTargetArea {
    id String @id @default(cuid())
    name String @unique
    workouts Workout[]
    movements Movement[]
}

// Beginner, Intermediate, Advanced, All
model WorkoutIntensity {
    id String @id @default(cuid())
    name String @unique
    workouts Workout[]
    movements Movement[]
}

model WorkoutSection {
    id String @id @default(cuid())  
    workout Workout @relation(fields: [workoutId], references: [id])
    workoutId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name String
    order Int
    exercises Exercise[]

    @@index([workoutId])
}

model Exercise {
    id String @id @default(cuid())  
    workoutSection WorkoutSection @relation(fields: [workoutSectionId], references: [id])
    workoutSectionId String
    movement Movement @relation(fields: [movementId], references: [id])
    movementId String
    duration Int
    rest Int

    @@index([workoutSectionId])
    @@index([movementId])
}

model Movement {
    id String @id @default(cuid()) 
    name String @unique
    description String?
    workoutType WorkoutType[]
    workoutTargetArea WorkoutTargetArea[]
    workoutIntensity WorkoutIntensity[]
    workoutSectionType WorkoutSectionType[]
    exercises Exercise[]
    combinationMovement Boolean @default(false)
}

// Warmup, Main, Cooldown
model WorkoutSectionType {
    id String @id @default(cuid())
    name String @unique
    movements Movement[]
}
